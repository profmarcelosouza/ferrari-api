generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)
}

model PasswordRecovery {
  id        Int       @id @default(autoincrement())
  token     String    @db.VarChar(255)
  userId    Int
  resetAt   DateTime? @db.DateTime(0)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_password_recoveries_users")

  @@index([userId], map: "FK_password_recoveries_users")
  @@map("password_recoveries")
}

model Person {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(250)
  birthAt   DateTime?  @db.Date
  phone     String?    @db.VarChar(16)
  document  String?    @db.VarChar(14)
  createdAt DateTime   @default(now()) @db.DateTime(0)
  updatedAt DateTime   @default(now()) @db.DateTime(0)
  Address   Address[]  @relation("addressesTopersons")
  contacts  contacts[] @relation("contactsTopersons")
  User      User[]

  @@map("persons")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique(map: "UQ_97672ac88f789774dd47f7c8be3") @db.VarChar(250)
  password         String             @db.VarChar(250)
  photo            String?            @db.VarChar(255)
  personId         Int
  createdAt        DateTime           @default(now()) @db.DateTime(0)
  updatedAt        DateTime           @default(now()) @db.DateTime(0)
  person           Person             @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_users_persons")
  PasswordRecovery PasswordRecovery[]

  @@index([personId], map: "FK_users_persons")
  @@map("users")
}

model contacts {
  id        Int      @id @default(autoincrement())
  personId  Int
  email     String   @db.VarChar(250)
  message   String   @db.Text
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)
  persons   Person   @relation("contactsTopersons", fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_contacts_persons")

  @@index([personId], map: "FK_contacts_persons")
}

model TimeOption {
  id        Int      @id @default(autoincrement())
  day       Int      @db.TinyInt
  time      DateTime @db.Time(0)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)

  @@map("time_options")
}

model Address {
  id         Int      @id @default(autoincrement())
  street     String
  number     String   @db.VarChar(16)
  complement String
  district   String
  city       String
  state      String
  country    String
  zipcode    String   @db.VarChar(8)
  personId   Int
  createdAt  DateTime @default(now()) @db.DateTime(0)
  updatedAt  DateTime @default(now()) @db.DateTime(0)
  person     Person   @relation("addressesTopersons", fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_addresses_persons")

  @@index([personId], map: "FK_addresses_persons")
  @@map("addresses")
}

model sevices {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(45)
  description String   @db.MediumText
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @db.DateTime(0)
  updatedAt   DateTime @default(now()) @db.DateTime(0)
}

model PaymentSituations {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(45)
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)

  @@map("payment_situations")
}

model Teste {
  id            Int             @id @default(autoincrement())
  nome          String          @db.VarChar(200)
  profissao     String          @db.VarChar(200)
  idade         Int
  telefone      String          @db.VarChar(25)
  createdAt     DateTime        @default(now()) @db.DateTime(0)
  updatedAt     DateTime        @default(now()) @db.DateTime(0)
  TesteCompra   TesteCompra[] @relation("testeToteste_compras")

  @@map("teste")
}

model TesteCompra {
  id        Int      @id @default(autoincrement())
  data      DateTime @db.DateTime(0)
  descricao String   @db.VarChar(256)
  valor     Decimal  @db.Decimal(10, 0)
  testeId   Int
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @db.DateTime(0)
  teste     Teste    @relation("testeToteste_compras", fields: [testeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_teste_compras_teste")

  @@index([testeId], map: "FK_teste_compras_teste")
  @@map("teste_compras")
}
